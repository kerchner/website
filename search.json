[
  {
    "objectID": "questions.html",
    "href": "questions.html",
    "title": "Question Types",
    "section": "",
    "text": "Use the sd_question() function to specify the question types.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Question Types"
    ]
  },
  {
    "objectID": "questions.html#introduction-of-arguments",
    "href": "questions.html#introduction-of-arguments",
    "title": "Question Types",
    "section": "Introduction of Arguments",
    "text": "Introduction of Arguments\nThis article showcases the different types of question supported by {surveydown}. Each question requires the user to define the following arguments to the sd_question() function:\n\nid: A unique identifier for the question, which will be used as the variable name in the resulting survey data.\nlabel: The label that will be displayed on the question in the survey.\ntype: The type of question, options include:\n\ntext: Single line open text input.\ntextarea: Multiple line open text input.\nnumeric: Single line numeric text input.\nmc: Multiple choice with a single select option (radio buttons).\nmc_buttons: Same as mc but as a “button” style instead of radio buttons.\nmc_multiple: Multiple choice with mutliple select options (check boxes).\nmc_multiple_buttons: Same as mc_multiple but as a “button” style instead of check boxes.\nselect: Select a choice from a drop down menu.\nslider: (Under construction) Slider to select discrete categories or continuous numbers.\ndate: Select a date from a calendar widget.\ndaterange: Select two dates from calendar widgets (e.g. begin and end dates).",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Question Types"
    ]
  },
  {
    "objectID": "questions.html#question-types",
    "href": "questions.html#question-types",
    "title": "Question Types",
    "section": "Question Types",
    "text": "Question Types\n\n1. text\nUse type = 'text' to specify a text input type question.\nScripts:\n\nsd_question(\n  type  = \"text\",\n  id    = \"silly_word\",\n  label = \"Write a silly word:\"\n)\n\nOutput:\n\n\n\n\nFigure 1: text Question Type\n\n\n\n\n\n2. textarea\nUse type = 'textarea' to specify a text area input type question.\nScripts:\n\nsd_question(\n  type  = \"textarea\",\n  id    = \"silly_paragraph\",\n  label = \"Write a silly paragraph:\"\n)\n\nOutput:\n\n\n\n\nFigure 2: textarea Question Type\n\n\n\n\n\n3. numeric\nUse type = 'numeric' to specify a numeric input type.\nScripts:\n\nsd_question(\n  type  = 'numeric',\n  id    = 'age',\n  label = \"What's your age?\"\n)\n\nOutput:\n\n\n\n\nFigure 3: numeric Question Type (Note there is a set of arrows on the right)\n\n\n\n\n\n4. mc\nUse type = 'mc' to specify a multiple choice type question with a single choice option.\nScripts:\n\nsd_question(\n  type   = 'mc',\n  id     = 'artist',\n  label  = \"Which artist do you prefer most from this list?\",\n  option = c(\n    \"Taylor Swift\" = \"taylor_swift\",\n    \"Beyoncé\"      = \"beyonce\",\n    \"Adele\"        = \"adele\",\n    \"Rihanna\"      = \"rihanna\",\n    \"Lady Gaga\"    = \"ladygaga\",\n    \"Ed Sheeran\"   = \"ed_sheeran\",\n    \"Drake\"        = \"drake\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 4: mc Question Type\n\n\n\n\n\n5. mc_buttons\nUse type = 'mc_buttons' to generate the button version of mc.\nScripts:\n\nsd_question(\n  type   = 'mc_buttons',\n  id     = 'fruit',\n  label  = \"Which fruit do you prefer most from this list?\",\n  option = c(\n    \"Apple\"      = \"apple\",\n    \"Banana\"     = \"banana\",\n    \"Pear\"       = \"pear\",\n    \"Strawberry\" = \"strawberry\",\n    \"Grape\"      = \"grape\",\n    \"Mango\"      = \"mango\",\n    \"Watermelon\" = \"watermelon\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 5: mc_buttons Question Type\n\n\n\n\n\n6. mc_multiple\nUse type = 'mc_multiple' to specify a multiple choice type question with multiple selection enabled.\nScripts:\n\nsd_question(\n  type  = 'mc_multiple',\n  id    = 'swift',\n  label = \"What are your favorite Taylor Swift albums (select all that apply)?\",\n  option = c(\n    \"Taylor Swift (2006)\" = \"taylor_swift\",\n    \"Fearless (2008)\"     = \"fearless\",\n    \"Speak Now (2010)\"    = \"speak_now\",\n    \"Red (2012)\"          = \"red\",\n    \"1989 (2014)\"         = \"1989\",\n    \"Reputation (2017)\"   = \"reputation\",\n    \"Lover (2019)\"        = \"lover\",\n    \"Folklore (2020)\"     = \"folklore\",\n    \"Evermore (2020)\"     = \"evermore\",\n    \"Midnights (2022)\"    = \"midnights\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 6: mc_multiple Question Type\n\n\n\n\n\n7. mc_multiple_buttons\nUse type = 'mc_multiple_buttons' to generate the button version of mc_multiple.\nScripts:\n\nsd_question(\n  type  = 'mc_multiple_buttons',\n  id    = 'michael_jackson',\n  label = \"Which are your favorite Michael Jackson songs (select all that apply)?\",\n  option = c(\n    \"Thriller (1982)\"          = \"thriller\",\n    \"Billie Jean (1982)\"       = \"billie_jean\",\n    \"Beat It (1982)\"           = \"beat_it\",\n    \"Man in the Mirror (1987)\" = \"man_in_the_mirror\",\n    \"Smooth Criminal (1987)\"   = \"smooth_criminal\",\n    \"Black or White (1991)\"    = \"black_or_white\",\n    \"Bad (1987)\"               = \"bad\",\n    \"Human Nature (1982)\"      = \"human_nature\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 7: mc_multiple_buttons Question Type\n\n\n\n\n\n8. select\nUse type = 'select' to specify a drop down select type question.\nScripts:\n\nsd_question(\n  type  = 'select',\n  id    = 'education',\n  label = \"What is the highest level of education you have attained?\",\n  option = c(\n    \"Did not attend high school\" = \"hs_no\",\n    \"Some high school\"           = \"hs_some\",\n    \"High school graduate\"       = \"hs_grad\",\n    \"Some college\"               = \"college_some\",\n    \"College\"                    = \"college_grad\",\n    \"Graduate Work\"              = \"grad\",\n    \"Prefer not to say\"          = \"no_response\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 8: select Question Type\n\n\n\n\n\n9. slider (Under Construction)\n\nDue to compatibility issues, the slider type is still under construction. Now the slider axis will only show numeric values ranging from 10 to 100. We will solve this problem in our future releases.\n\nUse type = 'slider' to specify a slider input type.\nScripts:\n\nsd_question(\n  type  = 'slider',\n  id    = 'climate_care',\n  label = \"To what extent do you believe human-caused climate change is real?\",\n  option = c(\n    \"Don't Believe\"    = \"dont_believe\",\n    \"Somewhat Believe\" = \"somewhat\",\n    \"Neutral\"          = \"neutral\",\n    \"Believe\"          = \"believe\",\n    \"Strongly Believe\" = \"strongly_believe\"\n  )\n)\n\nOutput:\n\n\n\n\nFigure 9: slider Question Type for Single Slider\n\n\n\ntype = 'slider' can also be used to select a range.\nScripts:\n\nsd_question(\n  type     = 'slider',\n  id       = 'coldest_months',\n  label    = \"What months do you think are the coldest throughout a year?\",\n  option   = month.abb,\n  selected = month.abb[c(4, 8)]\n)\n\nOutput:\n\n\n\n\nFigure 10: slider Question Type for Two Sliders\n\n\n\n\n\n10. date\nUse type = 'date' to specify a date input type.\nScripts:\n\nsd_question(\n  type  = 'date',\n  id    = 'dob',\n  label = \"What is your date of birth?\"\n)\n\nOutput:\n\n\n\n\nFigure 11: date Question Type\n\n\n\nThe date value will be today’s date by default. Upon clicking on the text box, you are provided with a date dialog box to choose date from.\n\n\n11. daterange\nUse type = 'daterange' to specify a date range input type.\nScripts:\n\nsd_question(\n  type  = 'daterange',\n  id    = 'hs_date',\n  label = \"When did you start and finish high school?\"\n)\n\nOutput:\n\n\n\n\nFigure 12: daterange Question Type",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Question Types"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "Configuration Options",
    "section": "",
    "text": "This page explains the various configuration options currently supported by surveydown\nAll survey configuration options are defined with the sd_config() function in the server code chunk.",
    "crumbs": [
      "Documentation",
      "Configuration Options"
    ]
  },
  {
    "objectID": "config.html#basic-conditional-display",
    "href": "config.html#basic-conditional-display",
    "title": "Configuration Options",
    "section": "Basic conditional display",
    "text": "Basic conditional display\n\nUse the show_if argument to control basic conditional display logic.\n\nTo have a question display conditionally upon the value of another question, you need to define both the triggering question and the target question. For example, let’s say we have a multiple choice question about people’s favorite penguin type, and the last option is “other”. If the respondent chose it, you may want a second question to popup that allows them to specify the other penguin type. To implement this, you would need to first define both questions, e.g.:\n\nsd_question(\n  type  = 'mc',\n  id    = 'penguins',\n  label = \"Which is your favorite type of penguin?\",\n  option = c(\n    'Adélie'    = 'adelie',\n    'Chinstrap' = 'chinstrap',\n    'Gentoo'    = 'gentoo',\n    'Other'     = 'other'\n  )\n)\n\nsd_question(\n  type  = \"text\",\n  id    = \"penguins_other\",\n  label = \"Please specify the other penguin type:\"\n)\n\nThen in the server code chunk, you can use the show_if argument to define that the penguins_other question would only be shown if the respondent chose the other option in the penguins question, like this:\n\nconfig &lt;- sd_config(\n  show_if = tibble::tribble(\n    ~question_id,  ~question_value, ~target,\n    \"penguins\",    \"other\",         \"penguins_other\"\n  )\n)\n\nThis will make the penguins_other question only appear if the respondent chose the other option in the penguins question.\nHere we’re using the tibble::tribble() function to define a data frame with three columns:\n\nquestion_id: The id of the triggering question.\nquestion_value: The triggering value.\ntarget: The id of the target question to display.\n\nYou don’t have to use tibble::tribble(), and in fact if you have a lot of show_if conditions, then you could create a csv file with all of your conditions in it and read it in to set the show_if conditions (just make sure the header has the same three column names), e.g.:\n\nconfig &lt;- sd_config(\n  show_if = readr::read_csv('path/to/show_if_conditions.csv')\n  )\n)",
    "crumbs": [
      "Documentation",
      "Configuration Options"
    ]
  },
  {
    "objectID": "config.html#custom-conditional-display",
    "href": "config.html#custom-conditional-display",
    "title": "Configuration Options",
    "section": "Custom conditional display",
    "text": "Custom conditional display\n\nUse the show_if_custom argument to control custom conditional display logic.\n\nInsert example here",
    "crumbs": [
      "Documentation",
      "Configuration Options"
    ]
  },
  {
    "objectID": "config.html#basic-skipping",
    "href": "config.html#basic-skipping",
    "title": "Configuration Options",
    "section": "Basic skipping",
    "text": "Basic skipping\n\nUse the skip_if argument to control basic skipping logic.\n\nOften times you’ll want to send people to different parts of the survey based on responses to questions. For example, let’s say you want to screen out people who do not own a vehicle. To do this, you would first define a question about their vehicle ownership, e.g.:\n\nsd_question(\n  type  = 'mc',\n  id    = 'vehicle_ownership',\n  label = \"Do you own your vehicle?\",\n  option = c(\n    'Yes' = 'yes',\n    'No'  = 'no'\n  )\n)\n\nThen in the server code chunk, you can use the skip_if argument in sd_config() to define the behavior of the next button on the page where you ask this question, like this:\n\nconfig &lt;- sd_config(\n  skip_if = tibble::tribble(\n    ~question_id,        ~question_value, ~target,\n    \"vehicle_ownership\", \"no\",            \"screenout\"\n  )\n)\n\nThis sets up a condition where the respondent will be sent to a page named screenout if they choose no on the vehicle_ownership question. You could put such a page at the end of the survey, something like this:\n::: {#screenout .sd-page}\n\nSorry, but you are not qualified to take our survey.\n\n:::\nNotice that we don’t have a sd_next() on this screenout page. That is how you define an end point for the survey taker. If there’s no “Next” button, then they cannot navigate anywhere else, so the survey is over.",
    "crumbs": [
      "Documentation",
      "Configuration Options"
    ]
  },
  {
    "objectID": "config.html#custom-skipping",
    "href": "config.html#custom-skipping",
    "title": "Configuration Options",
    "section": "Custom skipping",
    "text": "Custom skipping\n\nUse the skip_if_custom argument to control custom skipping logic.\n\nInsert example here",
    "crumbs": [
      "Documentation",
      "Configuration Options"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Install R & Quarto\nYou need both:\n\nInstall R\nInstall Quarto\n\nAlso, we recommend working with an IDE. RStudio is great, and we also like VS Code and Positron.\n\n\nInstall the {surveydown} R package\n{surveydown} is not yet on CRAN, but you can install the development version from GitHub with the following command in R:\n\n# install.packages(\"remotes\")\nremotes::install_github(\"jhelvy/surveydown\")\n\n\n\nInstall the surveydown Quarto Extension\nOnce you start working on an actual survey, you’ll need the surveydown Quarto extension. We recommend starting with a template survey, which will automatically add the latest extension for you:\n\nsurveydown::sd_create_survey(\"path/to/folder\")\n\nOtherwise, you can install the extension using the terminal or with the {surveydown} package:\n\nUsing the Terminal:\n\n\nquarto install extension jhelvy/surveydown-ext\n\n\nUsing the {surveydown} R package:\n\n\nsurveydown::sd_update_extension()\n\n\n\nVersion Control\nTo check if you have the latest R package and Quarto extension versions installed, run:\n\nsurveydown::sd_check_versions()\n\nTo update the R package and Quarto extension to the latest version:\n\nsurveydown::sd_update_surveydown()\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Documentation",
      "Installation"
    ]
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "Database Setup",
    "section": "",
    "text": "This guide will help users set up a supabase account to work inside of SurveyDown for quick & live server updates\n\n\nStep 1: Create your account\nNavigate to supabase website and create an account.\n\n\nStep 2: Start a project\nFrom the Main page, select “Start your Project” underlined in red.\n\n\n\nStep 3: Create a project\nAfter creating your new account proceeding to your dashboard, select “New Project”.\n\n\n\nStep 4: Create a database\nThe next step is to create your respective database. Here you must use the password you created for your survey project (see vignette(\"password\")).\n\n\n\nStep 5: Find the DB parameters\nWhile on your project dashboard select the settings gear in the bottom left, then select “Database”.\n\n\n\n\nStep 6: Copy the DB parameters\nCopy the all of the connection parameters to your database.\n\n\n\nStep 7: Update the arguments in sd_database()\nNow that we’ve created our database and have gotten all the needed parameters we can now connect the database to our survey.\nTaking a look at our code inside of our survey.qmd file you will notice five arguments in sd_database(). This is where you will replace the NULL values with the ones you copied from your database. The last argument, table_name, can be any name of your choosing.\n\ndb &lt;- sd_database(\n  host       = NULL,\n  db_name    = NULL,\n  port       = NULL,\n  user       = NULL,\n  table_name = NULL\n)\n\nIf you don’t have a database setup yet, you can just leave the function blank and your survey will still run, just without any response data being stored:\n\ndb &lt;- sd_database()\n\n\n\nExample\nAn example of what the function should look like after you have updated all the parameters is below:\n\ndb &lt;- sd_database(\n  host       = \"aws-0-us-west-1.pooler.supabase.com\", \n  db_name    = \"postgres\", # For the purpose of supabase, this will always be \"postgres\".\n  port       = \"1234\", \n  user       = \"postgres.UserValue\",\n  table_name = \"my_table_name\"\n)\n\n\n\nTada!!!\nGoing back to your Project dashboard and selecting “Table Editor” on the left hand bar tab you should see your table appear once your survey is run and interacted with atleast once.\n\n\n\n\n Back to top",
    "crumbs": [
      "Documentation",
      "Database Setup"
    ]
  },
  {
    "objectID": "password.html",
    "href": "password.html",
    "title": "Setting a Password",
    "section": "",
    "text": "Every surveydown survey needs a password to secure access to the survey data. You should set one password for each project.\n\n\nWhat is the password used for?\nYour password is used for two purposes:\n\nObtaining access to the admin page of your survey (see admin).\nObtaining access to the Supabase database storing your survey data (ee vignette(\"database\")).\n\n\n\nHow do I set a password?\nTo set your surveydown password in this project, run:\n\nsd_set_password(\"your_password\")\n\n\nWarning: Do NOT put the sd_set_password() function in your .qmd file!\n\nThis is designed to be run once in your R console and not again (unless you want to change the password).\n\n\nWhat does it do?\nBy running sd_set_password(), a .Renviron file is created in your project directory that contains your password. This file is used to access your database and write data to it, as well as provide access to the admin page. It must remain in the root project directory.\nThe call to sd_set_password() also adds a .gitignore file in your project with .Renviron in it, so it won’t be accidentally uploaded to github. If a .gitignore file already exists, it will be updated to include .Renviron).\n\n\n\n\n Back to top",
    "crumbs": [
      "Setting a Password"
    ]
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Introduction to surveydown",
    "section": "",
    "text": "In surveydown, your entire survey is designed using markdown and R code in a single Quarto document (a .qmd file). The {surveydown} R package provides a set of functions for defining the survey content and configuration options. Each function starts with sd_ to make them easy to identify.\nYou can add content to your survey using markdown formatting, or in RStudio you can edit with the visual editor. Survey questions are defined in R code chunks with the sd_question() function. Pages are defined using fences (:::), and navigation buttons handled with the sd_next() function. You can modify the configuration options in the server code chunk (the last code chunk at the bottom of the .qmd file) with the sd_config() function, and you can configure the database with the sd_database(). Details on each of these steps are provided in separate guides in the documentation.\nThis introduction covers the basic steps to get started with surveydown.\n\n1. Install\nSee vignette(\"install\")\n\n\n2. Start with a template\nIn the R console, run the following to to setup a template survey:\n\nsurveydown::sd_create_survey(\"path/to/folder\")\n\nThis will create a folder located at \"path/to/folder\" with the following files:\n\nexample.qmd: a template survey you should edit.\nexample.Rproj: An RStudio project file (helpful if you’re working in RStudio)\n_extensions: A folder with the surveydown Quarto extension needed to make everything work (don’t modify this).\n\n\n\n3. Add content\nSee vignette(\"content\") for details on adding content to your survey, like text, images, etc. with markdown and / or code chunks. As a quick overview:\n\nAdd pages using fences, like this:\n\n::: {#page1 .sd-page}\n\nPage 1 content here\n\n:::\n\nAdd questions with the sd_question() function in code chunks (see vignette(\"questions\") for supported question types). For example:\n\n```{r}\nsd_question(\n  type  = 'mc',\n  id    = 'penguins',\n  label = \"Which is your favorite type of penguin?\",\n  option = c(\n    'Adélie'    = 'adelie',\n    'Chinstrap' = 'chinstrap',\n    'Gentoo'    = 'gentoo'\n  )\n)\n```\n\n\n4. Add configuration options\nIn the server chunk (bottom of qmd file), add control logic to your survey with the sd_config() function. See vignette(\"config\").\n\n\n5. Setup your database\nAlso in the server chunk, setup your database with the sd_database() function, or leave it blank to preview / edit your survey without database connected. See vignette(\"database\").\n\n\n6. Locally preview\nPreview your survey by clicking the “Run Document” button in RStudio or in your terminal running the command quarto serve survey_file_name.qmd.\n\n\n7. Deploy\nDeploy your survey by hosting it on your favorite server, like shinyapps.io, huggingface, etc. See vignette(\"deploy\").\n\n\n\n\n Back to top",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "surveydown.org",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About page",
    "section": "",
    "text": "About page\n\n\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "formatting.html",
    "href": "formatting.html",
    "title": "Formatting Questions",
    "section": "",
    "text": "On this page, we’ll demonstrate some of the formatting options for displaying questions.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Formatting Questions"
    ]
  },
  {
    "objectID": "formatting.html#markdown",
    "href": "formatting.html#markdown",
    "title": "Formatting Questions",
    "section": "Markdown",
    "text": "Markdown\nMarkdown is supported for the question label.\nThe label argument for any question type can accept markdown formatting. For example, the question below uses the ** symbols to make some works bold.\nScripts:\n\nsd_question(\n  type   = 'mc',\n  id     = 'markdown_label',\n  label  = \"**This** is a question *label* supporting ***markdown***:\",\n  option = c(\n    \"Option A\" = \"option_a\",\n    \"Option B\" = \"option_b\",\n    \"Option C\" = \"option_c\"\n  )\n)\n\nOutput:\n\n\n\nMarkdown is also supported for options in mc_buttons questions.\nFor mc_button type questions, you can also use markdown to format the option labels.\nScripts:\n\nsd_question(\n  type   = 'mc_buttons',\n  id     = 'markdown_buttons',\n  label  = \"The 3 options below support markdown:\",\n  option = c(\n    \"*Option A*\"     = \"option_a\",\n    \"**Option B**\"   = \"option_b\",\n    \"***Option C***\" = \"option_c\"\n  )\n)\n\nOutput:\n\n\n\nThe same is true for mc_multiple_buttons.\nScripts:\n\nsd_question(\n  type   = 'mc_multiple_buttons',\n  id     = 'markdown_multiple_buttons',\n  label  = \"The 3 options below support markdown:\",\n  option = c(\n    \"*Option A*\"     = \"option_a\",\n    \"**Option B**\"   = \"option_b\",\n    \"***Option C***\" = \"option_c\"\n  )\n)\n\nOutput:",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Formatting Questions"
    ]
  },
  {
    "objectID": "formatting.html#html",
    "href": "formatting.html#html",
    "title": "Formatting Questions",
    "section": "HTML",
    "text": "HTML\nHTML is supported for options of mc_buttons and mc_multiple_buttons, so that you can insert mixed content including plain text, markdown, and HTML images. For example, here is a question with some complex labels for a choice question.\nScripts:\n\n# Define the option vector\nhtml_buttons_option &lt;- c(\"option_1\", \"option_2\", \"option_3\")\n\n# Change the names of each element to display markdown-formatted text \n# and an embedded image using html\nnames(html_buttons_option)[1] &lt;- \"**Option 1**&lt;br&gt;\n    &lt;img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/fuji.jpg' width=100&gt;&lt;br&gt;\n    **Type**: Fuji&lt;br&gt;\n    **Price**: $ 2 / lb&lt;br&gt;\n    **Freshness**: Average\"\nnames(html_buttons_option)[2] &lt;- \"**Option 2**&lt;br&gt;\n    &lt;img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/pinkLady.jpg' width=100&gt;&lt;br&gt;\n    **Type**: Pink Lady&lt;br&gt;\n    **Price**: $ 1.5 / lb&lt;br&gt;\n    **Freshness**: Excellent\"\nnames(html_buttons_option)[3] &lt;- \"**Option 3**&lt;br&gt;\n    &lt;img src='https://raw.githubusercontent.com/jhelvy/formr4conjoint/master/survey/images/honeycrisp.jpg' width=100&gt;&lt;br&gt;\n    **Type**: Honeycrisp&lt;br&gt;\n    **Price**: $ 2 / lb&lt;br&gt;\n    **Freshness**: Poor\"\n\nsd_question(\n  type   = 'mc_buttons',\n  id     = 'html_buttons',\n  label  = \"A sample survey question using `mc_buttons`\",\n  option = html_buttons_option\n)\n\nOutput:",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Formatting Questions"
    ]
  },
  {
    "objectID": "formatting.html#width",
    "href": "formatting.html#width",
    "title": "Formatting Questions",
    "section": "Width",
    "text": "Width\nUse the width argument to change the width for the question.\nScripts:\n\nsd_question(\n  type  = \"textarea\",\n  id    = \"change_width\",\n  label = \"This text area has width set as 40%:\",\n  width = \"40%\"\n)\n\nOutput:",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Formatting Questions"
    ]
  },
  {
    "objectID": "deployment.html",
    "href": "deployment.html",
    "title": "Deploying Your Survey",
    "section": "",
    "text": "Once you have previewed and tested your survey and are ready to field it, it is time to make it live for respondents to fill out.\nTo deploy your survey, you’ll need to have the following recipes ready:\nThese steps are easy to follow. We will go through one by one.",
    "crumbs": [
      "Documentation",
      "Deploying Your Survey"
    ]
  },
  {
    "objectID": "deployment.html#step-1-1-construct-your-survey",
    "href": "deployment.html#step-1-1-construct-your-survey",
    "title": "Deploying Your Survey",
    "section": "Step 1-1: Construct your survey",
    "text": "Step 1-1: Construct your survey\nConstruct your survey using the {surveydown} R package and the surveydown Quarto extension.\nThe previous articles in Usage Guide are sufficient to guide you through the survey construction process.",
    "crumbs": [
      "Documentation",
      "Deploying Your Survey"
    ]
  },
  {
    "objectID": "deployment.html#step-1-2-set-your-password",
    "href": "deployment.html#step-1-2-set-your-password",
    "title": "Deploying Your Survey",
    "section": "Step 1-2: Set your password",
    "text": "Step 1-2: Set your password\nOne important setting is the password of your supabase project. Here’s how.\nWhile you set up your supabase project, you will create a password for it. This password will then be defined in your survey project. In the very end of your survey .qmd file, you’ll need to define the db variable, which should be the settings of your supabase project. There is an argument called password. You can directly paste your password here as password = \"my_password\", but it’s not recommended since this will make your supabase project unsafe.\nWe recommend you to write password = Sys.getenv(\"SUPABASE_PASSWORD\"), like this:\n\ndb &lt;- sd_database(\n  # Other settings...\n  password = Sys.getenv(\"SUPABASE_PASSWORD\")\n)\n\nThen, define the password using the sd_set_password() function. For example, if your password is my_password, you should run sd_set_password(\"my_password\") in the R Console.\nGreat! Now you have your supabase password successfully defined in your survey project!\nIf you are interested, below are the details of what sd_set_password() does:\n\nIt creates an .Renviron file or writes into an existing one.\nIn this .Renviron file, it writes in SUPABASE_PASSWORD=my_password, where \"my_password\" is whatever your argument of the sd_set_password() function.\nIf there is a previously defined SUPABASE_PASSWORD in .Renviron, it will be overwritten, so you are safe to run this function multiple times.\nIt adds .Renviron into .gitignore to avoid it being pushed to GitHub thus keeps your password safe. If you run multiple times, .Renviron will appear only once in .gitignore.",
    "crumbs": [
      "Documentation",
      "Deploying Your Survey"
    ]
  },
  {
    "objectID": "deployment.html#step-1-3-render-your-.qmd-file",
    "href": "deployment.html#step-1-3-render-your-.qmd-file",
    "title": "Deploying Your Survey",
    "section": "Step 1-3: Render your .qmd file",
    "text": "Step 1-3: Render your .qmd file\nThis is simple: just hit Render or cmd/ctrl + shift + K (Mac/Win). But the reason why I make this a stand-alone step is that, WITHOUT rendering your .qmd file, your survey CANNOT be deployed online.\nOne more thing… If you fail to deploy locally while you have set every argument correctly in your db variable, try to define gssencmode = \"disable\" in your db variable:\n\ndb &lt;- sd_database(\n  # Other settings...\n  gssencmode = \"disable\"\n)\n\nThis can help solve your connection problem. The value of gssencmode is set to \"prefer\" by default.",
    "crumbs": [
      "Documentation",
      "Deploying Your Survey"
    ]
  },
  {
    "objectID": "components.html",
    "href": "components.html",
    "title": "Survey Components",
    "section": "",
    "text": "This guide covers the main elements in your .qmd survey file as well as how to add content to your survey, like pages, questions, etc.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#required-yaml-content",
    "href": "components.html#required-yaml-content",
    "title": "Survey Components",
    "section": "Required YAML content",
    "text": "Required YAML content\nFor a surveydown survey, your YAML must contain at least the following:\n---\nserver: shiny\nfilters: [surveydown]\n---\nThe server: shiny part ensures that the document will render as a shiny app. The filters: [surveydown] part applies the surveydown Quarto extension to the project, which is required.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#setitng-the-theme",
    "href": "components.html#setitng-the-theme",
    "title": "Survey Components",
    "section": "Setitng the theme",
    "text": "Setitng the theme\nThe YAML can also be used to set several optional global settings, such as the overall survey theme:\n---\ntheme: united # Any bootswatch theme \n---\nThere are 25 bootswatch themes to choose from. You can also provide a custom.scss file to further modify the theme, or even combine the two, e.g.:\n---\ntheme: [united, custom.scss]\n---",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#progress-bar",
    "href": "components.html#progress-bar",
    "title": "Survey Components",
    "section": "Progress bar",
    "text": "Progress bar\nYou can modify the survey progress bar with the barcolor and barposition keys, e.g.:\n---\nbarcolor: theme \nbarposition: top \n---\nThe barcolor key defines the color of the progress bar. It defaults to theme, meaning it will take the primary theme color. You may also use any hex code to overwrite this color as you wish, e.g.: #768692.\nThe barposition key defines the position of the progress bar. It defaults to top, but can also be changed to bottom or none (to remove the bar). The progress bar updates on every question the user clicks on, not pages.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#adding-pages",
    "href": "components.html#adding-pages",
    "title": "Survey Components",
    "section": "Adding pages",
    "text": "Adding pages\nIn surveydown, pages are defined using fences (:::), like this:\n::: {#welcome .sd-page}\n\nPage 1 content here\n\n:::\n\n::: {#page2 .sd-page}\n\nPage 2 content here\n\n:::\nAs you can see, we use three colon symbols :::, called a “fence”, to mark the start and end of pages. This notation is commonly used in Quarto for a variety of use cases, like defining subfigures in images.\nIn the starting fence, you need to define a page name (e.g. welcome and page2 in the example above) and you need to define the class as .sd-page. Then anything you put between the page fences will appear on that page.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#adding-navigation-buttons",
    "href": "components.html#adding-navigation-buttons",
    "title": "Survey Components",
    "section": "Adding navigation buttons",
    "text": "Adding navigation buttons\nTo navigate to the next page, you need to insert a sd_next() function call inside a code chunk, like this:\n```{r}\nsd_next(next_page = 'page2')\n```\nThe above code chunk will create a “Next” button that goes on to page 2 that looks like this:\n\n\nNext\n\n\nIn this example, the next button has to be inserted in a code chunk in between the ::: fences of the welcome page in order to have a “Next” button that goes on to page 2. You can also send the user to other pages by just changing the value assigned to the next_page argument.\nFinally, you can also change the label of the button by changing the label argument, like this:\n```{r}\nsd_next(next_page = 'page2', label = 'Next page')\n```\n\n\nNext page",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  },
  {
    "objectID": "components.html#adding-questions",
    "href": "components.html#adding-questions",
    "title": "Survey Components",
    "section": "Adding questions",
    "text": "Adding questions\nEvery survey question is created using the sd_question() function inside a code chunk. The question type is defined by the type argument. For example, to add a multiple choice question, you could insert the following code chunk:\n```{r}\nsd_question(\n  type  = 'mc',\n  id    = 'penguins',\n  label = \"Which is your favorite type of penguin?\",\n  option = c(\n    'Adélie'    = 'adelie',\n    'Chinstrap' = 'chinstrap',\n    'Gentoo'    = 'gentoo'\n  )\n)\n```\nThe above code chunk will create a multiple choice question that looks like this:\n\n\n\n\nWhich is your favorite type of penguin? *\n\n\n\n\n\nAdélie\n\n\n\n\n\nChinstrap\n\n\n\n\n\nGentoo\n\n\n\n\n\n\n\n\nThe sd_question() function can be used to create a variety of question types, like text input, select drop down choices, and more by changing the type argument (see vignette(\"questions\")).\nThe function has many other arguments for customizing the look and feel of the question, such as the height and width (see vignette(\"formatting\")).\nFinally, sd_question() has a required argument that can be used to make a question required or optional (e.g., required = TRUE). The default is FALSE, meaning the question is optional.",
    "crumbs": [
      "Documentation",
      "Survey Content",
      "Survey Components"
    ]
  }
]